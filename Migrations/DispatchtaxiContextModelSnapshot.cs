// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxiDispatch.API.Data;

#nullable disable

namespace TaxiDispatch.API.Migrations
{
    [DbContext(typeof(DispatchtaxiContext))]
    partial class DispatchtaxiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TaxiDispatch.API.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CustomerId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Dispatcher", b =>
                {
                    b.Property<int>("DispatcherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DispatcherID");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ShiftTime")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("DispatcherId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID1");

                    b.ToTable("dispatchers", (string)null);
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CarPlateNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("IsAvailability")
                        .HasColumnType("bit(1)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("DriverId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID2");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory", (string)null);
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "CustomerID");

                    b.HasIndex(new[] { "DriverId" }, "DriverID");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Paymenttransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)");

                    b.Property<ulong>("IsPaymentCompleted")
                        .HasColumnType("bit(1)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime>("PaymentDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "OrderID");

                    b.ToTable("paymenttransactions", (string)null);
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RatingID");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.HasKey("RatingId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "OrderID")
                        .HasDatabaseName("OrderID1");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DriverId" }, "DriverID")
                        .HasDatabaseName("DriverID1");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Customer", b =>
                {
                    b.HasOne("TaxiDispatch.API.Models.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("customers_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Dispatcher", b =>
                {
                    b.HasOne("TaxiDispatch.API.Models.User", "User")
                        .WithMany("Dispatchers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("dispatchers_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Driver", b =>
                {
                    b.HasOne("TaxiDispatch.API.Models.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("drivers_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Order", b =>
                {
                    b.HasOne("TaxiDispatch.API.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("orders_ibfk_1");

                    b.HasOne("TaxiDispatch.API.Models.Driver", "Driver")
                        .WithMany("Orders")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("orders_ibfk_2");

                    b.Navigation("Customer");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Paymenttransaction", b =>
                {
                    b.HasOne("TaxiDispatch.API.Models.Order", "Order")
                        .WithMany("Paymenttransactions")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("paymenttransactions_ibfk_1");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Rating", b =>
                {
                    b.HasOne("TaxiDispatch.API.Models.Order", "Order")
                        .WithMany("Ratings")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("ratings_ibfk_1");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Vehicle", b =>
                {
                    b.HasOne("TaxiDispatch.API.Models.Driver", "Driver")
                        .WithMany("Vehicles")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("vehicles_ibfk_1");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Driver", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.Order", b =>
                {
                    b.Navigation("Paymenttransactions");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("TaxiDispatch.API.Models.User", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Dispatchers");

                    b.Navigation("Drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
